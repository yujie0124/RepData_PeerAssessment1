#x=wt, y=mpg
#R will set itself for the skill by detecting data in the data set
mtcars
plot(wt,disp, main="Scatterplot of wt vs disp")
eglayout<-matrix(1:4, 2, 2)
layout(eglayout)
layout.show(4)
#layout use to display more graphs, useful for comparison among different data
layout(matrix(1:6, 3, 2))
layout.show(4)
x<-seq(1,10)
y<-x^2-10*x
plot(x,y)
x<-seq(1,10)
y<-x^2-10*x
plot(x,y)
x
y
plot(women$height)
plot(women$height, col="red1") #put in colours
plot(women$height, women$weight, xlab="height", ylab="weight", main="Average Height & Weights for American WOmen",col="tomato1") #put in main title
x<-c(1,2,3)
y<-c(1,3,8)
plot(x,y)
lmout<-lm(y~x) #lm contains the slope and intercept of the fitted line
abline(lmout) # the graph will show the dots and line together
lines(c(1.5,2.5),c(3,3))
#connect the dots but do not want the dots:
plot(x,y,type="l")
summary(women) #let us check the data
d1=density(women$height, from=0, to=200)
d2=density(women$weight, from=0, to=200)
plot(d1,main="",xlab="")
lines(d2)
text(49,0.06,"height") # to label the line
hist(VADeaths, ylim=c(0,10), ylab="Deaths per 1000", main="Death rates in Virgina", col=c("red1","blue1","brown1","seagreen1"))
barplot(VADeaths, beside=TRUE, legend=TRUE, ylim=c(0,90), ylab="Deaths per 1000", main="Death rates in Virginia", col=rainbow(6))
dotchart(VADeaths, xlim=c(0,75),xlab="Deaths per 1000",main="Death rates in Virginia")
groupsizes<-c(18,30,32,10,10)
labels<-c("A","B","C","D", "E")
pie(groupsizes,labels, col=rainbow(5))
boxplot(Sepal.Length~Species, data=iris, ylab="Sepal length(cm)", main="Iris measurements",boxwex=0.5)
library(ggplot2)
Iris<-iris
ggplot(data=Iris,aes(x=Sepal.Width, y=Sepal.Length)) + geom_point() + theme_minimal()
ggplot(data=Iris,aes(x=Sepal.Width, y=Sepal.Length,color=Species)) + geom_point() + theme_minimal()
ggplot(data=Iris,aes(x=Sepal.Width, y=Sepal.Length,color=Species)) + geom_point() +geom_smooth() + theme_minimal()
options(repr.plot.width = 10, repr.plot.height = 6)# to adjust size of plots
ggplot(data=Iris,aes(x=Sepal.Width, y=Sepal.Length,color=Species)) + geom_point() + geom_smooth(se=FALSE) +facet_wrap(~Species) +theme_minimal()
pretest2  <- round( rnorm( n=5000, mean=80, sd=5) )
posttest2 <- round( pretest2 + rnorm( n=5000, mean=3, sd=3) )
pretest2 [pretest2  > 100] <- 100
posttest2[posttest2 > 100] <- 100
temp <- data.frame(pretest2,posttest2)
ggplot(temp, aes(pretest2, posttest2),  size=2, position = position_jitter(x = 2,y = 2) ) +  geom_jitter(colour=alpha("black",0.15) )
ggplot(temp, aes( x=pretest2, y=posttest2) ) +geom_point( size=1 ) + geom_density2d()
ggplot(data=Iris,aes(x=Sepal.Length,fill=Species)) + geom_histogram() +theme_minimal()
exam1=c(2.0,3.3,4.3,2.3,2.3,3.3)
exam2=c(3.3,2.0,4.0,0.0,1.0,3.7)
quiz=c(4.0,3.7,4.0,3.3,3.3,4.0)
mygraph=data.frame(exam1,exam2,quiz,stringsAsFactors=FALSE)
View(mygraph)
E1=density(mygraph$exam1,from=0,to=200)
E2=density(mygraph$exam2,from=0,to=200)
plot(E1,main="", xlab="")
lines(E2)
text(1.3,0.4,"Exam1")
text(0.9,0.2,"Exam2")
E1=density(mygraph$exam1,from=0,to=10)
E2=density(mygraph$exam2,from=0,to=10)
plot(E1,main="", xlab="")
lines(E2)
text(1.3,0.4,"Exam1")
text(0.9,0.2,"Exam2")
review=c(1,2,"c")
mode(review)
review=list(1,2,"c")
mode(review)
review=as.character(99)
review
mode(review)
paste("Hellow","World","!")
paste("Hellow","World",sep = "")
paste("H","i",sep=",")
NULL
NULL
c()
is.null(c())
review=as.integer(5.12)
review
review=as.integer(5)
review
review=as.integer(5.6666)
round(review,3)
round(review,2)
review=5.66666
round(review,2)
round(6.777,1)
ceiling(5.6)
floor(5.6)
exp(5.6666)
log(5,2)
log(8,2)
review<- factor(c(" yes ", " yes ", " no ", " yes ", " no "))
review
marital_status<-c(0,3,2,2,1)
fstatus<-factor(marital_status, levels = 0:3)
levels(fstatus)<-c("single", "married" , "divorced", "widowed")
fstatus
as.numeric(fstatus)   #extract the numerical coding as numbers
levels(fstatus)   #extract the name of levels
review=c(1,2,3)
review[2]
review=c(1,2,3)
names(review)=c('one','two','three')
review
names(review)=c("oone",'two','three')
review
names(review)[1:2] = c('uno', 'dos')
review
review["uno"]
revie=as.Date("2019-09-28")
revie
as.Date("1/15/2010",format("%m/%d/%Y"))
as.Date("April 26, 2010", format="%B %d,%Y")
as.Date("Apr 26, 2010", format="%B %d,%Y")
as.Date("Apr 26, 2010", format="%b %d,%Y")
as.Date("Jan 26, 2010", format="%b %d,%Y")
as.Date("Jan 26, 2010", format="%B %d,%Y")
as.Date("Jan 26, 2010", format="%B %d,%Y")
as.Date("Jan 26, 2010", format="%B %d,%y")
as.Date("Jan 26, 10", format="%B %d,%y")
as.Date("Jan 26, 05", format="%B %d,%y")
as.Date("Jan 26, 87", format="%B %d,%y")
as.Date("Jan 26, 47", format="%B %d,%y")
as.Date("Jan 26, 67", format="%B %d,%y")
as.Date("Jan 26, 77", format="%B %d,%y")
as.Date("Jan 26, 1977", format="%B %d,%y")
as.Date.POSIXct("2019-09-28")
as.Date.default("2019-09-28")
as.Date.numeric("2019-09-28")
Sys.time()
revie=Sys.time()
class(revie)
revie"2019-11-20 03:15:39 +05"
revie="2019-11-20 03:15:39 +05"
as.Date.numeric(revie)
as.Date.default(revie)
dtimes = c("2002-06-09 12:45:40","2003-01-29 09:30:40", "2002-09-04 16:45:40","2002-11-13 20:00:40", "2002-07-07 17:30:40")
dtparts = t(as.data.frame(strsplit(dtimes,' ')))
row.names(dtparts) = NULL
library(chron)
thetimes = chron(dates=dtparts[,1],times=dtparts[,2], format=c('y-m-d','h:m:s'))
thetimes
revie=vector(length=2)
revie[1]=5
revie[2]=12
revie
revie<-c(88,5,12,13)
revie
revie<-c(x[1:3], 168,x[4])
revie
revie<-c(88,5,12,13)
revie
revie<-c(revie[1:3], 168,x[4])
revie
revie[c(1:3)]
seq(from=20, to=50, by=3)
seq(from=2.1, to = 3, length=10)
seq(from=2.01, to = 3, length=10)
revie
seq(revie)
revie<-NULL
seq(revie)
revie=rep(8,4)
revie
rep(c(5,6,7),3)
rep(1:3,2)
rep(c(1,2,3),each=2)
rep(1:4,times=c(2,3,2,4))
rep(1:4,times=c(2,3,2,3))
revie<-1:30
any(revie>8)
all(revie>8)
all(revie>0)
length(which(revie>2))
(1:length(revie))[revie>2]
revie<-matrix(c(1,2,3,4),nrow=2,ncol=2)
revie
revie<-matrix(c(1,2,3,4),nrow=2)
revie
revie=diag(c(3, 1, -2, 0))
revie
revie<-matrix(c(1,2,3,4,5,6),nrow=2,byrow=T) #byrow = True
revie
cells <- c(1,26,24,68)
rnames <- c("R1", "R2")
cnames <- c("C1", "C2")
mymatrix <- matrix(cells, nrow=2, ncol=2, byrow=TRUE,dimnames=list(rnames, cnames))
mymatrix
cells <- c(1,26,24,68)
rnames <- c("R1", "R2")
cnames <- c("C1", "C2")
mymatrix <- matrix(cells, nrow=2, ncol=2, byrow=TRUE,dimnames=c(rnames, cnames))
mymatrix
rm(revie)
review=matrix(c(1,2,3,4),nrow=2,byrow=T)
review
3*rreview
3*review
y%*%y
y^2
review%*%review
review
review*review
review1=matrix(c(5,6),nrow = 2,ncol = 1)
solve(review,review1)
solve(review)
M1=matrix(c(1,2,3,4),nrow=2,ncol=2,byrow=T)
M2=matrix(c(5,6,7,8),nrow=2,ncol=2,byRow=T)
M2=matrix(c(5,6,7,8),nrow=2,ncol=2,byrow=T)
M1
M2
rbind(M1,M2)
cbind(M1,M2)
rownames(M1)<-c("a", "b")
colnames(M1)<-c("c", "d")
M1
vector1 <- c(2,9,3)vector2 <- c(10,16,17,13,11,15)
vector1 <- c(2,9,3);vector2 <- c(10,16,17,13,11,15)
result <- array(c(vector1,vector2),dim=c(3,3,2))
rresult
result
review=list(name= "George", salary = 55000, union=T)
review
n1 = c(2, 3, 5)
s2 =  c("aa",  "bb",  "cc",  "dd", "ee" )
b3 = c(TRUE,  FALSE,  TRUE,  FALSE,  FALSE )
review = list( n1, s2, b3, 3)
review
review=list(name= "George", salary = 55000, union=T)
review$name
review{{name}}
review[[name]]
review[["name""]]
;
]
""
review[["name"]]
review[[1]]
length(review)
rmat = matrix(rnorm(15),5,3, dimnames=list(NULL,c('A','B','C')))
rmat
weight<-c(3.22,4.21,2.87,2.33)
height<-c(54,59,58,49)
head.circum<-c(34,38,NA,24)
d<-data.frame(weight,head.circum,height,stringsAsFactors=FALSE)
#the false is to avoid character strings are treated as categorical data
d
dim(d)
nrow(D)
nrow(D)
nrow(d)
ncol(d)
d[,1]
d$head.circum
str
str(d)
d[2:3,]
d[d$weight>=3]
d[d$weight>=3,]
d[d$weight,d$]
d[d$weight,d$]
d[d$weight,d$]]
d[d$weight,d$
]
d[[d$weight,d$]
d(d$weight,d$)
rbind(d,list(3.51,35,56))  #add a new row
gender<-c("F","M","M","F")  #declare a new column
cbind(d,gender) #add a new column
t(d)
expand.grid(die,die)
die=c(1,2,3,4,5,6)
expand.grid(die,die)
for(i in 1:5)
{ print(i)
print("Hello world!")
}
for (value in c("My", "second", "for", "loop")) {
print(value) }
words=vector(c("my","third","for","loop"))
words=vector("my","third","for","loop")
words=c("my","third","for","loop")
for(i in length(words)){}
for(i in length(words)){print(i)}
for(i in length(words)){print(words)}
i<- 1
while(i<=10)
{  i<- i + 4}
i<- 1
while(i<=10)
{  i<- i + 4}
i<- 1
while(i<=10)
{  i<- i + 4  print(1)}
i<- 1
while(i<=10)
{  i<- i + 4  print(i)}
i<- 1
while(i<=10){i=i+4;print(i)}
plays_till_broke <- function(start_with) {
cash <- start_with
n <- 0
while (cash > 0) {
cash <- cash - 1 + play()
n <- n + 1
}
n
}
plays_till_broke(100)
x <- -5
if(x > 0)  #just copy and paste the command in console
{ print("Non-negative number")
} else { print("Negative number") }
A <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3)
B <- matrix(c(4,5,6,7,8,9,10,11,12,13,14,15),nrow=4,ncol=3)
C <- matrix(c(8,9,10,8,9,10),nrow=3,ncol=2)
MyList<-list(A,B,C)
lapply(MyList,"[", , 2)
Extract the 2nd column from `MyList`, ‘[ ‘ is a standard selection operator in R
lapply(MyList,"[", 1, 2)  # to extract a single element from each matrix
lapply(MyList,"[", 1, )      # Extract the 1st row from `MyList`
A <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3)
B <- matrix(c(4,5,6,7,8,9,10,11,12,13,14,15),nrow=4,ncol=3)
C <- matrix(c(8,9,10,8,9,10),nrow=3,ncol=2)
MyList<-list(A,B,C)
lapply(MyList,"[", , 2)
lapply(MyList,"[", 1, 2)  # to extract a single element from each matrix
lapply(MyList,"[", 1, )      # Extract the 1st row from `MyList`
A <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3)
B <- matrix(c(4,5,6,7,8,9,10,11,12,13,14,15),nrow=4,ncol=3)
C <- matrix(c(8,9,10,8,9,10),nrow=3,ncol=2)
MyList<-list(A,B,C)
lapply(MyList,"[", , 2)
lapply(MyList,"[", 1, 2)  # to extract a single element from each matrix
lapply(MyList,"[", 1, )      # Extract the 1st row from `MyList`
A <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3)
B <- matrix(c(4,5,6,7,8,9,10,11,12,13,14,15),nrow=4,ncol=3)
C <- matrix(c(8,9,10,8,9,10),nrow=3,ncol=2)
MyList<-list(A,B,C)    MyList
lapply(MyList,"[", , 2)
lapply(MyList,"[", 1, 2)  # to extract a single element from each matrix
lapply(MyList,"[", 1, )      # Extract the 1st row from `MyList`
MyList
lapply(MyList,"[",2,,mean)
lapply(MyList,mean,"[",2,)
lapply(MyList,mean)
lapply(MyList,"[",2,mean)
lapply(MyList,"[",,2,mean)
review=lapply(MyList,"[",1,)
lapply(review,mean)
sapply(MyList,"[",1,)
sapply(MyList,"[",1,2)
sapply(MyList,"[",1,2,simplify = F)
df <- data.frame(x = 1:10, y = letters[1:10])
sapply(df, class)
Vapply(MyList,"[",1,2)
df <- data.frame(x = 1:10, y = letters[1:10])
vapply(df, class)
Vapply(MyList,"[",1,2,integer(1))
laaply(MyList,1,mean
)
lapply(MyList,1,mean)
apply(MyList,1,mean)
smoke <- matrix(c(51,43,22,92,28,21,68,22,9),ncol=3,byrow=TRUE)
colnames(smoke) <- c("High","Low","Middle")
rownames(smoke) <- c("current","former","never")
smoke <- as.table(smoke)
smoke
library(reshape2)
names(airquality) <- tolower(names(airquality))
head(airquality) #original data is like this
aql <- melt(airquality)
aql=melt(airquality)
head(aql)
aql <- melt(airquality, id.vars = c("month", "day"), variable.name = "climate_variable", value.name = "climate_value")
head(aql)
aql <- melt(airquality, id.vars = c("month", "day")) #cont
aqw <- dcast(aql, month + day ~ variable)
head(aqw)
dcast(aql, month ~ variable, fun.aggregate = mean, na.rm = TRUE)
head(aql)
Data<-read.delim("DataReshape.txt",sep="")
head(Data)
reshape(Data, direction="long", varying=7:9)
names(Data)[7:9] <- c("time.1", "time.2", "time.3")
head(Data)
reshape(Data, direction="long", varying=7:9)
reshape(Data, direction="long",     varying=7:9, idvar='id', timevar="TIME",v.names="RESULTS")
head(Data2)	#display first 6 row
reshape(DATA7,direction = "long", varying = , idvar = 'country', timevar = 'year',)
Data2<-read.csv (“ESA2010_GDI.csv” )
save(Data2,file = “data2.RData)
IloveR = paste("Hello", "How are you", "R", sep = "-")
paste("X", 1:5, sep = ".")	#CHANGE THE SEPARATOR
IloveR
my_string = "programming with data is fun"
print(my_string, quote = FALSE)
my_string
cat(my_string)
cat(my_string, "with R")
cat(my_string, "with R", sep = " =) ")
cat(1:10, sep = "-")
cat(my_string, "with R")
cat(my_string, "with R", sep = " =) ")
cat(1:10, sep = "-")
format(13.7, nsmall = 3) # nsmall=number of decimal point
format(c(6, 13.1), digits = 2) #total number of digits (include decimal)
format(c("A", "BB", "CCC"), width = 5, justify = "centre")
format(c("A", "BB", "CCC"), width = 5, justify = "left")
format(c("A", "BB", "CCC"), width = 5, justify = "right")
n<-c(2,3,5)
sprintf("%f", n[1])
sprintf("%.3f", n[2]) #3 decimal point
sprintf("%1.0f", n[3]) #1 integer
sprintf("%5.1f", n[1])
sprintf("%+f", n[1]) #with positive sign
sprintf("%-10f", n[2]) # left justified
sprintf("%s is %f feet tall\n", "Sven", 7.1)
sprintf("%s %d", "test", 1:3)
x=c(88,5,12,13)
x=c(x[1:3],168,x[4])
x
x=c(x[1:3],168,x[4])
y<-matrix(c(12,1,4,5,21,2,2,3,1),nrow=3,byrow=T)
y
y<-matrix(c(12,5,2,1,21,3,4,2,1),nrow=3,ncol=3)
y
newdata=y[,1:2]
newdata
tapply(medical.example$age,medical.example$treatment,mean)
weight<-c(3.22,4.21,2.87,2.33)
height<-c(54,59,58,49)
head.circum<-c(34,38,NA,24)
d<-data.frame(weight,head.circum,height,stringsAsFactors=FALSE)
d
d<-data.frame(c(weight,head.circum,height),stringsAsFactors=FALSE)
d
a=c(10,20,30)
b=c('book','pen')
c=c(TRUE,FALSE,TRUE)
d=c(2.5,8,10)
df=data.frame(c(a,b,c,d))
df
df=data.frame((a,b,c,d))
df=data.frame(a,b,c,d)
df=data.frame(a,b,c,d)
df=data.frame(a,b,c,d,stringsAsFactors = false)
df=data.frame(a,b,c,d,stringsAsFactors = FALSE)
> a=c(10,20)
> b=c('book','pen')
> c=c(TRUE,FALSE)
> d=c(2.5,8,10)
a=c(10,20)
b=c('book','pen')
c=c(TRUE,FALSE)
d=c(2.5,8,10)
df <- data.frame(a,b,c,d)
a=c(10,20)
b=c('book','pen')
c=c(TRUE,FALSE)
d=c(2.5,8)
df <- data.frame(a,b,c,d)
df
df <- data.frame(c(a,b,c,d)
)
df
review=c(88,5,12,13)
review
review=c(x[1:3],168,x[4])
review
review=c(review[1:3],168,review[4])
review
review=c(88,5,12,13)
review=c(review[1:3],168,review[4])
review
mean(mtcars$mpg)
1+1
example <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8), nrow = 4, ncol = 2)
example
View(example)
View(example)
setwd("~/")
install.packages("ggplot2")
library(ggplot2)
help(package="ggplot2")
browseVignettes("ggplot2")
browseVignettes("devtools")
clear
clear()
library(knitr)
library(ggplot2)
library(dplyr)
library(plyr)
library(plyr)
library(dplyr)
a<- 6
a
setwd(D:/Documents/RepData_PeerAssessment1)
setwd(D:\Documents\RepData_PeerAssessment1)
setwd("D:/Documents/RepData_PeerAssessment1")
